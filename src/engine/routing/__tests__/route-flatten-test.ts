import {flattenRoutes} from '../route-flatten';

const routesToFlat = [
	{url: '/1'},
	{
		url: '/2',
		routes: [
			{url: '/2.1'},
			{url: '/2.2'},
			{
				url: '/2.3',
				routes: [
					{url: '/2.3.1'},
					{
						url: '/2.3.2',
						routes: [{url: '/2.3.2.1'},]
					},
				]
			},
		]
	},
	{url: '/3'},
];

const flattenedRoutes = [
	{
		url: '/1',
		icon: void 0,
		isHomePage: void 0,
		isLateral: void 0,
		isLoginPage: void 0,
		breadcrumbs: void 0,
		onlyWhenAuthorized: void 0,
		onlyWhenNotAuthorized: void 0,
		page: void 0,
		pageClass: void 0,
		spinnerDuringLogin: void 0,
		subtitle: void 0,
		title: void 0,
		_parentUrl: void 0,
		_hasSubRoutes: false,
		_hasVisibleSubRoutes: false,
	},
	{
		url: '/2',
		icon: void 0,
		isHomePage: void 0,
		isLateral: void 0,
		isLoginPage: void 0,
		breadcrumbs: void 0,
		onlyWhenAuthorized: void 0,
		onlyWhenNotAuthorized: void 0,
		page: void 0,
		pageClass: void 0,
		spinnerDuringLogin: void 0,
		subtitle: void 0,
		title: void 0,
		_parentUrl: void 0,
		_hasSubRoutes: true,
		_hasVisibleSubRoutes: true,
	},
	{
		url: '/2.1',
		icon: void 0,
		isHomePage: void 0,
		isLateral: void 0,
		isLoginPage: void 0,
		breadcrumbs: void 0,
		onlyWhenAuthorized: void 0,
		onlyWhenNotAuthorized: void 0,
		page: void 0,
		pageClass: void 0,
		spinnerDuringLogin: void 0,
		subtitle: void 0,
		title: void 0,
		_parentUrl: '/2',
		_hasSubRoutes: false,
		_hasVisibleSubRoutes: false,
	},
	{
		url: '/2.2',
		icon: void 0,
		isHomePage: void 0,
		isLateral: void 0,
		isLoginPage: void 0,
		breadcrumbs: void 0,
		onlyWhenAuthorized: void 0,
		onlyWhenNotAuthorized: void 0,
		page: void 0,
		pageClass: void 0,
		spinnerDuringLogin: void 0,
		subtitle: void 0,
		title: void 0,
		_parentUrl: '/2',
		_hasSubRoutes: false,
		_hasVisibleSubRoutes: false,
	},
	{
		url: '/2.3',
		icon: void 0,
		isHomePage: void 0,
		isLateral: void 0,
		isLoginPage: void 0,
		breadcrumbs: void 0,
		onlyWhenAuthorized: void 0,
		onlyWhenNotAuthorized: void 0,
		page: void 0,
		pageClass: void 0,
		spinnerDuringLogin: void 0,
		subtitle: void 0,
		title: void 0,
		_parentUrl: '/2',
		_hasSubRoutes: true,
		_hasVisibleSubRoutes: true,
	},
	{
		url: '/2.3.1',
		icon: void 0,
		isHomePage: void 0,
		isLateral: void 0,
		isLoginPage: void 0,
		breadcrumbs: void 0,
		onlyWhenAuthorized: void 0,
		onlyWhenNotAuthorized: void 0,
		page: void 0,
		pageClass: void 0,
		spinnerDuringLogin: void 0,
		subtitle: void 0,
		title: void 0,
		_parentUrl: '/2.3',
		_hasSubRoutes: false,
		_hasVisibleSubRoutes: false,
	},
	{
		url: '/2.3.2',
		icon: void 0,
		isHomePage: void 0,
		isLateral: void 0,
		isLoginPage: void 0,
		breadcrumbs: void 0,
		onlyWhenAuthorized: void 0,
		onlyWhenNotAuthorized: void 0,
		page: void 0,
		pageClass: void 0,
		spinnerDuringLogin: void 0,
		subtitle: void 0,
		title: void 0,
		_parentUrl: '/2.3',
		_hasSubRoutes: true,
		_hasVisibleSubRoutes: true,
	},
	{
		url: '/2.3.2.1',
		icon: void 0,
		isHomePage: void 0,
		isLateral: void 0,
		isLoginPage: void 0,
		breadcrumbs: void 0,
		onlyWhenAuthorized: void 0,
		onlyWhenNotAuthorized: void 0,
		page: void 0,
		pageClass: void 0,
		spinnerDuringLogin: void 0,
		subtitle: void 0,
		title: void 0,
		_parentUrl: '/2.3.2',
		_hasSubRoutes: false,
		_hasVisibleSubRoutes: false,
	},
	{
		url: '/3',
		icon: void 0,
		isHomePage: void 0,
		isLateral: void 0,
		isLoginPage: void 0,
		breadcrumbs: void 0,
		onlyWhenAuthorized: void 0,
		onlyWhenNotAuthorized: void 0,
		page: void 0,
		pageClass: void 0,
		spinnerDuringLogin: void 0,
		subtitle: void 0,
		title: void 0,
		_parentUrl: void 0,
		_hasSubRoutes: false,
		_hasVisibleSubRoutes: false,
	},
];

const routesToFlatSimple = [
	{
		url: '/A'
	},
	{
		url: '/B',
		routes: [
			{url: '/B.1'},
			{url: '/B.2'},
		]
	}
];


const flattenedSimpleRoutes = [
	{
		url: '/A',
		icon: void 0,
		isHomePage: void 0,
		isLateral: void 0,
		isLoginPage: void 0,
		breadcrumbs: void 0,
		onlyWhenAuthorized: void 0,
		onlyWhenNotAuthorized: void 0,
		page: void 0,
		pageClass: void 0,
		spinnerDuringLogin: void 0,
		subtitle: void 0,
		title: void 0,
		_parentUrl: void 0,
		_hasSubRoutes: false,
		_hasVisibleSubRoutes: false,
	},
	{
		url: '/B',
		icon: void 0,
		isHomePage: void 0,
		isLateral: void 0,
		isLoginPage: void 0,
		breadcrumbs: void 0,
		onlyWhenAuthorized: void 0,
		onlyWhenNotAuthorized: void 0,
		page: void 0,
		pageClass: void 0,
		spinnerDuringLogin: void 0,
		subtitle: void 0,
		title: void 0,
		_parentUrl: void 0,
		_hasSubRoutes: true,
		_hasVisibleSubRoutes: true,
	},
	{
		url: '/B.1',
		icon: void 0,
		isHomePage: void 0,
		isLateral: void 0,
		isLoginPage: void 0,
		breadcrumbs: void 0,
		onlyWhenAuthorized: void 0,
		onlyWhenNotAuthorized: void 0,
		page: void 0,
		pageClass: void 0,
		spinnerDuringLogin: void 0,
		subtitle: void 0,
		title: void 0,
		_parentUrl: '/B',
		_hasSubRoutes: false,
		_hasVisibleSubRoutes: false,
	},
	{
		url: '/B.2',
		icon: void 0,
		isHomePage: void 0,
		isLateral: void 0,
		isLoginPage: void 0,
		breadcrumbs: void 0,
		onlyWhenAuthorized: void 0,
		onlyWhenNotAuthorized: void 0,
		page: void 0,
		pageClass: void 0,
		spinnerDuringLogin: void 0,
		subtitle: void 0,
		title: void 0,
		_parentUrl: '/B',
		_hasSubRoutes: false,
		_hasVisibleSubRoutes: false,
	}
];

describe('Route mapping flattening', () => {
	it('should return empty array on no routes', () => {
		expect(flattenRoutes(null as any).length).toBe(0);
	});

	it('should do flattening of simple routes', () => {
		expect(flattenRoutes(routesToFlatSimple as any)).toEqual(flattenedSimpleRoutes);
	});

	it('should do flattening of more complex routes', () => {
		expect(flattenRoutes(routesToFlat as any)).toEqual(flattenedRoutes);
	});
});
